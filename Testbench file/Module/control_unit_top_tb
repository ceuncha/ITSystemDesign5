`timescale 1ns / 1ps

module control_unit_top_tb;

    // Inputs
    reg [6:0] opcode;
    reg [2:0] funct3;
    reg [6:0] funct7;

    // Outputs
    wire RegWrite;
    wire MemToReg;
    wire MemRead;
    wire MemWrite;
    wire [2:0] ALUOp;
    wire ALUSrc;
    wire Branch;
    wire Jump;
    wire [1:0] RWSel;

    // Instantiate the Unit Under Test (UUT)
    control_unit_top uut (
        .opcode(opcode), 
        .funct3(funct3), 
        .funct7(funct7), 
        .RegWrite(RegWrite), 
        .MemToReg(MemToReg), 
        .MemRead(MemRead), 
        .MemWrite(MemWrite), 
        .ALUOp(ALUOp), 
        .ALUSrc(ALUSrc), 
        .Branch(Branch), 
        .Jump(Jump),
        .RWSel(RWSel)
    );

    initial begin
        // Initialize Inputs
        opcode = 0;
        funct3 = 0;
        funct7 = 0;

        // R-type Instructions Test (ADD, SUB, AND, OR, XOR, SLL, SRL, SRA, SLT, SLTU)
        #10; opcode = 7'b0110011; funct3 = 3'b000; funct7 = 7'b0000000; // ADD
        #10; funct7 = 7'b0100000; // SUB
        #10; funct3 = 3'b111; funct7 = 7'b0000000; // AND
        #10; funct3 = 3'b110; // OR
        #10; funct3 = 3'b100; // XOR
        #10; funct3 = 3'b001; // SLL
        #10; funct3 = 3'b101; funct7 = 7'b0000000; // SRL
        #10; funct7 = 7'b0100000; // SRA
        #10; funct3 = 3'b010; funct7 = 7'b0000000; // SLT
        #10; funct3 = 3'b011; // SLTU

        // I-type ALU Instructions Test (ADDI, SLTI, SLTIU, XORI, ORI, ANDI, SLLI, SRLI, SRAI)
        #10; opcode = 7'b0010011; funct3 = 3'b000; // ADDI
        #10; funct3 = 3'b010; // SLTI
        #10; funct3 = 3'b011; // SLTIU
        #10; funct3 = 3'b100; // XORI
        #10; funct3 = 3'b110; // ORI
        #10; funct3 = 3'b111; // ANDI
        #10; funct3 = 3'b001; funct7 = 7'b0000000; // SLLI
        #10; funct3 = 3'b101; funct7 = 7'b0000000; // SRLI
        #10; funct7 = 7'b0100000; // SRAI

        // I-type Load Instructions Test
        #10; opcode = 7'b0000011; funct3 = 3'b000; // LB
        #10; funct3 = 3'b001; // LH
        #10; funct3 = 3'b010; // LW
        #10; funct3 = 3'b100; // LBU
        #10; funct3 = 3'b101; // LHU

        // S-type Store Instructions Test
        #10; opcode = 7'b0100011; funct3 = 3'b000; // SB
        #10; funct3 = 3'b001; // SH
        #10; funct3 = 3'b010; // SW

        // B-type Branch Instructions Test
        #10; opcode = 7'b1100011; funct3 = 3'b000; // BEQ
        #10; funct3 = 3'b001; // BNE
        #10; funct3 = 3'b100; // BLT
        #10; funct3 = 3'b101; // BGE
        #10; funct3 = 3'b110; // BLTU
        #10; funct3 = 3'b111; // BGEU

        // U-type Instructions Test
        #10; opcode = 7'b0110111; // LUI
        #10; opcode = 7'b0010111; // AUIPC

        // J-type Instructions Test
        #10; opcode = 7'b1101111; // JAL
        #10; opcode = 7'b1100111; funct3 = 3'b000; // JALR

        // Wait for 100 ns for global reset to finish
        #100;
        $finish;
    end

endmodule
