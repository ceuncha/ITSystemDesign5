module ID_top (
    input wire clk,
    input wire reset,
    input wire IF_ID_Flush,
    input wire write_enable,
    input wire [31:0] instOut, // 외부에서 입력받은 inst 신호
    input wire [31:0] PC, // 외부에서 입력받은 PC 신호
    input wire [7:0] wb_phy_addr,
    input wire [4:0] wb_logical_addr,
    input wire ALUSrc1,
    input wire ALUSrc2,
    input wire [31:0] Write_Data,
    output wire [31:0] PData1,
    output wire [31:0] PData2,
    output wire [7:0] phy_addr_out1,
    output wire [7:0] phy_addr_out2,
    output wire [7:0] rd_phy_out,
    output wire [4:0] rd_log_out,
    output wire [7:0] free_phy_addr,
    output wire [7:0] free_phy_addr_out,
    output wire [31:0] Imm,
    output wire [31:0] mux_out2,
    output wire [31:0] mux_out,
    output wire RegWrite,
    output wire MemToReg,
    output wire MemRead,
    output wire MemWrite,
    output wire [3:0] ALUOp,
    output wire [1:0] ALUSrc,
    output wire RWsel,
    output wire Branch,
    output wire Jump,
    output wire [4:0] logical_addr1,
    output wire [4:0] logical_addr2,
    output wire [4:0] rd_logical_addr
);

    wire [31:0] IF_ID_instOut;
    wire [31:0] IF_ID_PC;
    wire id_on;

    assign logical_addr1 = IF_ID_instOut[19:15];
    assign logical_addr2 = IF_ID_instOut[24:20];
    assign rd_logical_addr = IF_ID_instOut[11:7];

    // ifid_pipeline_register 인스턴스
    ifid_pipeline_register ifid_pipeline_reg (
        .clk(clk),
        .reset(reset),
        .IF_ID_Flush(IF_ID_Flush),
        .instOut(instOut), // 외부에서 입력받은 inst 신호
        .PC(PC), // 외부에서 입력받은 PC 신호
        .IF_ID_instOut(IF_ID_instOut),
        .IF_ID_PC(IF_ID_PC),
        .id_on(id_on)
    );

    // RAT 인스턴스
    RAT rat_inst (
        .reset(reset),
        .id_on(id_on),
        .logical_addr1(logical_addr1),
        .logical_addr2(logical_addr2),
        .rd_logical_addr(rd_logical_addr),
        .free_phy_addr(free_phy_addr),
        .wb_phy_addr(wb_phy_addr),
        .wb_logical_addr(wb_logical_addr),
        .opcode(IF_ID_instOut[6:0]),
        .phy_addr_out1(phy_addr_out1),
        .phy_addr_out2(phy_addr_out2),
        .rd_phy_out(rd_phy_out),
        .rd_log_out(rd_log_out),
        .free_phy_addr_out(free_phy_addr_out)
    );

    // chuchu 인스턴스
    chuchu chuchu_inst (
        .clk(clk),
        .reset(reset),
        .rat_data(free_phy_addr_out),
        .free_phy_addr(free_phy_addr)
    );

    // register_file 인스턴스
    register_file reg_file_inst (
        .clk(clk),
        .Ps1(phy_addr_out1),
        .Ps2(phy_addr_out2),
        .MEM_WB_RegWrite(write_enable),
        .Write_Data(Write_Data),
        .PD(wb_phy_addr),
        .PData1(PData1),
        .PData2(PData2)
    );

    // sign_extend 인스턴스
    sign_extend sign_extend_inst (
        .inst(IF_ID_instOut),
        .Imm(Imm)
    );

    // DIMux 인스턴스
    DIMux dimux_inst (
        .PData2(PData2),
        .imm32(Imm),
        .ALUSrc2(ALUSrc2),
        .mux_out2(mux_out2)
    );

    // DPMux 인스턴스
    DPMux dpmux_inst (
        .IF_ID_PC(IF_ID_PC),
        .PData1(PData1),
        .ALUSrc1(ALUSrc1),
        .mux_out(mux_out)
    );

    // control_unit_top 인스턴스
    control_unit_top control_unit (
        .opcode(IF_ID_instOut[6:0]),
        .funct3(IF_ID_instOut[14:12]),
        .funct7(IF_ID_instOut[31:25]),
        .RegWrite(RegWrite),
        .MemToReg(MemToReg),
        .MemRead(MemRead),
        .MemWrite(MemWrite),
        .ALUOp(ALUOp),
        .ALUSrc(ALUSrc),
        .RWsel(RWsel),
        .Branch(Branch),
        .Jump(Jump)
    );

  RS_EX_decoder rs_ex_decoder_inst (
        .clk(clk),
        .reset(reset),
        .in_opcode(opcode),
        .in_operand1(operand1),
        .in_operand2(operand2),
        .in_func3(funct3),
        .in_pc(pc),
        .MemToReg(MemToReg),
        .MemRead(MemRead),
        .MemWrite(MemWrite),
        .ALUOP(ALUOP),
        .ALUSrc1(ALUSrc1),
        .ALUSrc2(ALUSrc2),
        .Jump(Jump),
        .Branch(Branch),
        .rd_phy_reg(Rd_phy),
        .Operand1_phy(Phy_addr_OP1),
        .Operand2_phy(Phy_addr_OP2),
        .valid(valid),
        .immediate(imm32),
        .add_alu_operand1(RS_alu_operand1_data),
        .add_alu_operand2(RS_alu_operand2_data),
        .add_alu_func3(RS_alu_funct3),
        .add_alu_pc(RS_alu_PC),
        .out_add_MemToReg(RS_alu_MemToReg),
        .out_add_MemRead(RS_alu_MenRead),
        .out_add_MemWrite(RS_alu_MemWrite),
        .out_add_ALUOP(RS_alu_ALUOP),
        .out_add_ALUSrc1(RS_alu_ALUSrc1),
        .out_add_ALUSrc2(RS_alu_ALUSrc2),
        .out_add_Jump(RS_alu_Jump),
        .out_add_Branch(RS_alu_Branch),
        .add_rd_phy_reg(Rd_phy),
        .add_rs_on(RS_alu_start),
        .out_add_Operand1_phy(Phy_addr_OP1),
        .out_add_Operand2_phy(Phy_addr_OP2),
        .out_add_valid(valid),
        .out_add_immediate(imm32),
        .mul_alu_operand1(RS_mul_operand1_data),
        .mul_alu_operand2(RS_mul_operand2_data),
        .mul_alu_func3(RS_mul_funct3),
        .mul_alu_pc(RS_mul_PC),
        .out_mul_MemToReg(RS_mul_MemToReg),
        .out_mul_MemRead(RS_mul_MenRead),
        .out_mul_MemWrite(RS_mul_MemWrite),
        .out_mul_ALUOP(RS_mul_ALUOP),
        .out_mul_ALUSrc1(RS_mul_ALUSrc1),
        .out_mul_ALUSrc2(RS_mul_ALUSrc2),
        .out_mul_Jump(RS_mul_Jump),
        .out_mul_Branch(RS_mul_Branch),
        .mul_rd_phy_reg(Rd_phy),
        .mul_rs_on(RS_mul_start),
        .out_mul_Operand1_phy(Phy_addr_OP1),
        .out_mul_Operand2_phy(Phy_addr_OP2),
        .out_mul_valid(valid),
        .out_mul_immediate(imm32),
        .div_alu_operand1(RS_div_operand1_data),
        .div_alu_operand2(RS_div_operand2_data),
        .div_alu_func3(RS_div_funct3),
        .div_alu_pc(RS_div_pc),
        .out_div_MemToReg(RS_div_MemToReg),
        .out_div_MemRead(RS_div_MenRead),
        .out_div_MemWrite(RS_div_MemWrite),
        .out_div_ALUOP(RS_div_ALUOP),
        .out_div_ALUSrc1(RS_div_ALUSrc1),
        .out_div_ALUSrc2(RS_div_ALUSrc2),
        .out_div_Jump(RS_div_Jump),
        .out_div_Branch(RS_div_Branch),
        .div_rd_phy_reg(Rd_phy),
        .div_rs_on(RS_div_start),
        .out_div_Operand1_phy(Phy_addr_OP1),
        .out_div_Operand2_phy(Phy_addr_OP2),
        .out_div_valid(valid),
        .out_div_immediate(imm32)
    );


endmodule
